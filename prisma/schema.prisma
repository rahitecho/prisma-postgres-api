generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customer {
  id                Int       @id(map: "PK_a7a13f4cacb744524e44dfdad32") @default(autoincrement())
  name              String    @db.VarChar(55)
  dob               DateTime? @db.Date
  gender            String    @default("Male") @db.VarChar(11)
  phone             String    @db.VarChar(55)
  email             String    @unique @db.VarChar(55)
  sport_id          Int
  city_id           Int
  customer_code     String    @db.VarChar(55)
  location          String
  address           String
  employment_status String    @db.VarChar(11)
  resident_status   String    @db.VarChar(11)
  status            Int
  created_by        Int?
  updated_by        Int?
  created_on DateTime @default(now()) @db.Timestamp(6)
  updated_on DateTime @updatedAt @db.Timestamp(6)
  otp               String?   @db.VarChar(45)
  isverified        Int       @default(0) @db.SmallInt
  otp_expiry_time   String?   @db.VarChar(45)
  valid_otp_time    Int       @default(15)
  google_id         String?   @db.VarChar(100)
  facebook_id       String?   @db.VarChar(100)
  apple_id          String?   @db.VarChar(100)
  order_id          String?   @db.VarChar(100)
  payment_id        String?   @db.VarChar(100)
  order_status      String?   @db.VarChar(45)
  picture           String?   @db.VarChar(4096)
  venue_id          Int?
}

enum Role {
  SUPERADMIN
  ADMIN
}

model user {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  role  Role   @default(ADMIN)
}

model Employee {
  id        String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  position  String?
  posts     post[]
}

model post {
  id        Int      @id @default(autoincrement()) // Primary key
  title     String                                 // Title of the post
  content   String?                                // Optional content
  published Boolean   @default(false)              // Publication status
  createdAt DateTime  @default(now())              // Timestamp
  updatedAt DateTime  @updatedAt                   // Auto-updated on change

  // Foreign key
  authorId  String                                    // Connects to Employee table
  author    Employee     @relation(fields: [authorId], references: [id])
}

model Company {
  id           String    @id @default(uuid())
  name         String
  domain       String    @unique
  isActive     Boolean   @default(true)
  employees        Employee[]
  subscriptions Subscription[]
}

model Plan {
  id        String   @id @default(uuid())
  name      String
  price     Float
  maxUsers  Int
  features  String[] // or make a Feature table
  subscriptions Subscription[]
}

model Subscription {
  id         String   @id @default(uuid())
  status     String   // "trial", "active", "cancelled"
  startDate  DateTime
  endDate    DateTime
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String
  plan       Plan     @relation(fields: [planId], references: [id])
  planId     String
  invoices   Invoice[]
}

model Invoice {
  id             String   @id @default(uuid())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  amount         Float
  dueDate        DateTime
  paidAt         DateTime?
}


